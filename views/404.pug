<!DOCTYPE html>
html(lang="en")
    head
        meta(charset='utf-8')
        meta(name="viewport" content="width=device-width, initial-scale=1")
        link(type="text/css" rel="stylesheet" href="/stylesheets/main.css" media="screen")
        link(type="text/css" rel="stylesheet" href="/stylesheets/dark.css" media="screen")
        link(type="text/css" rel="stylesheet" href="/stylesheets/game.css" media="screen")
        link(href="https://fonts.googleapis.com/css2?family=Fredericka+the+Great&display=swap" rel="stylesheet")
        link(href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0-alpha1/dist/css/bootstrap.min.css" rel="stylesheet" type="text/css" integrity="sha384-GLhlTQ8iRABdZLl6O3oVMWSktQOp6b7In1Zl3/Jr59b6EGGoI1aFkw7cmDA6j6gD" crossorigin="anonymous")
        script(src="https://kit.fontawesome.com/58515bd467.js" type="text/javascript" crossorigin="anonymous")
        title Angele Henry | Memory game
    body.custom-scrollbar-css
        include partials/header
        .container.text-center
            #letsstart.game-title.collapse.multi-collapse.show
                p.h1 404 Not found
                p.small.text-gray The page you tried to reach was not found... 
                    | But you found a hidden game! I love coding games! 
                p Let's try a memory game to train our brain!
                p
                button.btn.btn-primary(type='button' onclick="timer()" data-bs-toggle='collapse' data-bs-target='.multi-collapse' aria-expanded='false' aria-controls='letsstart letsplay') Let's play!

            #letsplay.game-frame.collapse.multi-collapse.p-3
                .toolbar.d-flex.justify-content-between.align-items-center.mt-2.mb-3.px-4
                    #displayTimer 00:00
                    .text-center
                        div Record
                        div#record record.name - record.time
                .game.row.justify-content-center
                    - cards.sort(() => (Math.random() > .5) ? 1 : -1);
                    each card in cards
                        .memory-card.m-2.p-0.notfound(id=card.id)
                          .memory-card-inner
                            .memory-card-back
                                img(src="/images/logo.png" height="100px" alt="back of the card" onclick="flipCard('"+card.id+"', '"+card.src+"')")
                            .memory-card-front
                                img(src=card.src height="100px" alt="front of the card")

    script(src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0-alpha1/dist/js/bootstrap.bundle.min.js" integrity="sha384-w76AqPfDkMBDXo30jS1Sgez6pr3x5MlQ1ZAGC+nuZB+EYdgRZgiwxhTBTkF7CXvN" crossorigin="anonymous")
    script(type="text/javascript").
        const displayTimer = document.getElementById('displayTimer');
        let sec = min = 0;
        let t;
        function tick(){
            sec++;
            if (sec >= 60) {
                sec = 0;
                min++;
            }
        };
        function add() {
            tick();
            displayTimer.innerHTML = (min > 9 ? min : "0" + min)
       		         + ":" + (sec > 9 ? sec : "0" + sec);
            timer();
        };
        function timer() {
            t = setTimeout(add, 1000);
        };
    script(type="text/javascript").
        let firstCard = undefined;
        let pending = false;
        let record = undefined;
        (async function () {
            record = await getRecord();
            document.getElementById("record").innerHTML = record.name + " - " + record.time;
        })()

        async function getRecord () {
            const response = await fetch("/recordtime").then((res) => res.json());
            return response.record;
        }
        async function writeRecord () {
            // TODO Ask the nickname
            // Post record
            const response = await fetch("/recordtime").then((res) => res.json());
            return response.record;
        }
        function isNewRecord () {
            const splitRecordTime = record.time.split(":");
            if ((min < splitRecordTime[0]) || (min === splitRecordTime[0] && sec < splitRecordTime[1])) {
                return true;
            }
            return false;
        }
        function displayDialog (message) {
            // TODO
        }
        async function thenVictory () {
            clearTimeout(t);
            if (isNewRecord()) {
                // Check the record is still the same
                const newRecord = await getRecord();
                if (record.time != newRecord.time) {
                    record = newRecord;
                }
                if (isNewRecord()) {
                    // New record
                    displayDialog("You broke the previous record! Good game :)");
                    writeRecord();
                } else {
                    // No new record
                    displayDialog(" Since you started the game, a new record has been set and you haven't beaten it. Sorry :(");
                }
            } else {
                // Game over
                displayDialog("Good game! Let's try to set a new record?");
            }
        }
        function flipCard(cardId, cardSrc) {
            if (pending) {
                return;
            }
            pending = true;

            // First get the selected card and flip it
            const selectedCard = document.getElementById(cardId);
            selectedCard.classList.toggle("active");

            if (firstCard) {
                const previousCard = document.getElementById(firstCard.id);
                // If a card has been previously flipped
                if (firstCard.src === cardSrc) {
                    // Check if it is the same than the one the user clicked on
                    firstCard = undefined;
                    previousCard.classList.toggle("notfound");
                    selectedCard.classList.toggle("notfound");
                    // Check if victory
                    const notFoundCards = document.getElementsByClassName("notfound");
                    if (notFoundCards.length === 0) {
                        thenVictory();
                    }
                    pending = false;
                } else {
                    // Else flip the two cards
                    setTimeout(function() {
                        previousCard.classList.toggle("active");
                        selectedCard.classList.toggle("active");
                        firstCard = undefined;
                        pending = false;
                    }, 1500);
                }
            } else {
                // Else add the card to firstCard
                firstCard = {
                    id: cardId,
                    src: cardSrc,
                };
                pending = false;
            }
        }